extends ../layout.jade

block title
  title BEM — Naming

block head
  link(rel="stylesheet" href="naming.css")

block scripts
  script(src="index.js")

block content
  .grid
    .grid__row
      .grid__cell-xs_size_12.raw-text
        :markdown
          # Naming
          > There are only two hard problems in Computer Science: cache invalidation and naming things — _Phil Karlton_

          It is known fact, that right styleguide can significantly increase development speed, debugging and implementing new features in legacy code. Sadly, most CSS codebase is developed without (sometimes) any structure and naming conventions. This leads to unmantainable CSS codebase in long term run.

          The BEM approach ensures that everyone who participates in the development of a website works with a single codebase and speaks the same language.

           * You will be prepared for the changes in design of the website.
           * CSS size will not grow without any bounds with duplicating classes.

    .grid__row
      .grid__cell-xs_size_12.grid__block-cell.raw-text
        :markdown
          ## Block
          Block encapsulates a standalone entity that is meaningful on its own. While blocks can be nested and interact with each other, semantically they remain equal; there is no precedence or hierarchy. Holistic entities without DOM representation (such as controllers or models) can be blocks as well.
    .grid__row
      .grid__cell-md_size_4.grid__cell_left-border.raw-text
        :markdown
          #### Naming

          Block name may consist of Latin letters, digits, and dashes. To form a CSS class, add short prefix for namespacing: `.block`
      .grid__cell-md_size_4.grid__cell_left-border.raw-text
        :markdown
          #### HTML
          Any DOM node can be a block if it accepts a class name.

          ```html
          <div class="block">...</div>
          ```
      .grid__cell-md_size_4.grid__cell_left-border.raw-text
        :markdown
          #### CSS
           * Use class name selector only
           * No tag names or id's
           * No dependency on other blocks/elements on a page

          ```css
          .block { color: #042 }
          ```
    .grid__row
      .grid__cell-xs_size_12.grid__element-cell.raw-text
        :markdown
          ## Element
          Elements are parts of a block and have no standalone meaning. Any element is semantically tied to its block.
    .grid__row
      .grid__cell-md_size_4.grid__cell_left-border.raw-text
        :markdown
          #### Naming
          Element name may consist of Latin letters, digits, and dashes.
          CSS class is formed as block name plus two undercores plus element name:
          `.block__elem`
      .grid__cell-md_size_4.grid__cell_left-border.raw-text
        :markdown
          #### HTML
          Any DOM node within a block can be an element. Within a given block, all elements are semantically equal.

          ```html
          <div class="block">
            ...
            <span class="block__elem"></span>
          </div>
          ```
      .grid__cell-md_size_4.grid__cell_left-border.raw-text
        :markdown
          #### CSS
           * Use class name selector only
           * No tag name or id's
           * No dependency on other blocks/elements on a page

          **Good**
          ```css
          .block__elem { color: #042; }
          ```

          **Bad**
          ```css
          .block .block__elem { color: #042; }
          div.block__elem { color: #042; }
          ```
    .grid__row
      .grid__cell-xs_size_12.grid__modifier-cell.raw-text
        :markdown
          ## Modifier
          Modifiers are flags on blocks or elements. Use them to change appearance or behavior.
    .grid__row
      .grid__cell-md_size_4.grid__cell_left-border.raw-text
        :markdown
          #### Naming
          Modifiers (both keys and values) may consist of Latin letters, digits, and dashes.

          Modifier can be a boolean flag or a key/value pair:

          __Boolean modifiers__<br>
              Original block/element name + single underscore + mod name: `.block_mod` or `.block__elem_mod`

           __Key/value modifiers__<br>
              Original block/element name + single underscore + mod key name + single underscore + mod value: `.block_key_value` or `.block__elem_key_value`
      .grid__cell-md_size_4.grid__cell_left-border.raw-text
        :markdown
          #### HTML
          Modifier is an extra class name which you add to a block/element DOM node. Add modifier classes only to blocks/elements they modify, and keep the original class:

          **Good**
          ```html
          <div class="block block_mod">...</div>
          <div class="block block_size_big block_shadow_yes">...</div>
          ```

          **Bad**
          ```html
          <div class="block_mod">...</div>
          ```
      .grid__cell-md_size_4.grid__cell_left-border.raw-text
        :markdown
          #### CSS
          Use modifier class name as selector:

          ```css
          .block_hidden { display: none }
          ```

          To alter elements based on a block-level modifier:

          ```css
          .block_mod .block__elem { display: none }
          ```

          Element modifier:

          ```css
          .block__elem_mod { display: none }
          ```
    .grid__row
      .grid__cell-xs_size_12.raw-text
        :markdown
          ## Example
          Suppose you have block `form` with modifiers `theme: 'xmas'` and `simple: true` and with elements `input` and `submit`, and element `submit` have it's own modifier `disabled: true` for not submitting form while it's not filled:
    .grid__row
      .grid__cell-md_size_6.raw-text
        :markdown
          #### HTML
          ```html
          <form class="form form_theme_xmas form_simple">
            <input class="form__input" type="text" />
            <input
              class="form__submit form__submit_disabled"
              type="submit" />
          </form>
          ```
      .grid__cell-md_size_6.raw-text
        :markdown
          #### CSS
          ```css
          .form { /* ... */ }
          .form_theme_xmas { /* ... */ }
          .form_simple { /* ... */ }
          .form__input { /* ... */ }
          .form__submit { /* ... */ }
          .form__submit_disabled { /* ... */ }
          ```
    .authors
      h1 Written by
      +author("https://avatars2.githubusercontent.com/u/192221?s=140", "Max Shirshin", "https://github.com/ingdir")

  +edit('https://github.com/getbem/getbem.com/edit/master/pages/naming/naming.jade')
