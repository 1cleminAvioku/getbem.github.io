extends ../layout.jade

block title
  title BEM — Introduction

block head
  link(rel="stylesheet" href="introduction.css")

block content
  .grid
    .grid__row
      .grid__cell-sm_size_12.raw-text
        h1 Introduction
          .badge.badge_yellow work in progress
        :markdown
          On smaller brochure sites, how your organize your styles isn’t usually a big concern. You get in there, write some CSS, or maybe even some SASS. You compile it all into a single stylesheet with SASS’s production settings, and then you aggregate it to get all the stylesheets from modules into a nice tidy package.

          However, when it comes to larger, more complex projects, how you organize your code is a key to efficiency. Not only in how how much time it takes, but also in how much code you write, and how much a browser has to load. This is especially important when you’re working with a team of themers, and when performance is important.

          This also true for long-term projects with legacy code (read "[How to Scale and Maintain Legacy CSS with Sass and SMACSS](http://webuild.envato.com/blog/how-to-scale-and-maintain-legacy-css-with-sass-and-smacss/)" — some nice SMACSS and BEM mixing in there).

          ### Methodologies

          There are plenty of [methodologies](https://github.com/ikkou/awesome-css#architecture) out there which aimed on reducing CSS codebase and organizing programmers cooperation and maintaining of CSS code. This is obvious in large projects like Twitter, Facebook and [Github](http://markdotto.com/2014/07/23/githubs-css/#two-bundles), but other projects often grows into same “Huge CSS file” state pretty quickly.

    .grid__row
      .grid__cell-sm_size_2.methodology.raw-text
        :markdown
          #### [OOCSS](https://oocss.org/)
          Separating container and content with CSS “objects”

      .grid__cell-sm_size_2.methodology.raw-text
        :markdown
          #### [SMACSS](https://smacss.com/)
          Style-guide to write your CSS with five categories for CSS rules

      .grid__cell-sm_size_2.methodology.raw-text
        :markdown
          #### [AMCSS](http://amcss.github.io/)
          Styling via attributes and their values with Modules, Variations & Traits

      .grid__cell-sm_size_2.methodology.raw-text
        :markdown
          #### [SUITCSS](http://suitcss.github.io/)
          Structured class names and meaningful hyphens

      .grid__cell-sm_size_2.methodology.raw-text
        :markdown
          #### [Atomic CSS](https://github.com/nemophrost/atomic-css)
          Breaking down styles into atomic, or indivisible, pieces

      .grid__cell-sm_size_2.methodology.methodology_last.raw-text
        :markdown
          # ...

    .grid__row
      .grid__cell-sm_size_12.raw-text
        br
        :markdown
          > We are looking for authors, that can write proper "[Comparsion of methodologies](https://github.com/getbem/getbem.com/issues/11)"

    .grid__row
      .grid__cell-sm_size_12.raw-text
        :markdown
          ### Why BEM over the others?

    .grid__row
      .grid__cell-sm_size_12.raw-text
        p No matter what methodology you choose to use in your projects, you will get advantages of structured CSS and UI. Some of them are less strict and more flexible, other is easier to understand and adapt in team. Instead of writting our opinion on BEM advantages, we leave you with some quotes about it:

    .grid__row
      .grid__cell-sm_size_4.raw-text
        h4(style="text-align: right")
          a(href="http://www.integralist.co.uk/posts/maintainable-css-with-bem/#why-bem-over-the-others") Maintainable CSS with BEM
          br
          | by Mark McDonnell
      .grid__cell-sm_size_8.raw-text
        :markdown
          > The reason I choose BEM over other methodologies comes down to this: it's less confusing than the other methods (i.e. SMACSS) but still provides us the good architecture we want (i.e. OOCSS) and with a recognisable terminology.

          > BEM succeeds because it provides a good object oriented structure with a familiar terminology and is simple enough to not get in your way.

    .grid__row
      .grid__cell-sm_size_5.raw-text
        h4(style="text-align: right")
          a(href="http://justinmarsan.com/css-methodology-and-frameworks/") CSS methodology and frameworks
          br
          | by Justin Marsan
      .grid__cell-sm_size_7.raw-text
        :markdown
          > Unlike OOCss, it doesn’t aim at total modularity, but the opposite: namespacing (through classes names), creating independent modules of css code that don’t interact with each other.

          > To me, independent modules is a simpler approach and while it fails to provide the modularity of OOCss, it gives easier to manage files.

    .grid__row
      .grid__cell-sm_size_6.raw-text
        h4(style="text-align: right")
          a(href="http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/") MindBEMding – getting your head ’round BEM syntax
          br
          | by Harry Roberts
      .grid__cell-sm_size_6.raw-text
        :markdown
          > BEM is a highly useful, powerful and simple naming convention to make your front-end code easier to read and understand, easier to work with, easier to scale, more robust and explicit and a lot more strict.

    .grid__row
      .grid__cell-sm_size_12.raw-text
        :markdown
          ### Blocks, Elements and Modifiers

          You will not be surprised, that BEM is abbreviation of the key elements of the methodology — Block, Element and Modifier.

    .grid__row
      .grid__cell-sm_size_2
      .grid__cell-sm_size_3.grid__cell_left-border
        .heading.heading_level_1.heading_block Block
        .raw-text
          :markdown
            Block explanation

            Picture

            __Examples__

            `header`, `container`, `menu`, `checkbox`, `input`
      .grid__cell-sm_size_3.grid__cell_left-border
        .heading.heading_level_1.heading_element Element
        .raw-text
          :markdown
            Element explanation

            Picture

            __Examples__

            `menu item`, `list item`, `checkbox caption`, `header title`
      .grid__cell-sm_size_3.grid__cell_left-border
        .heading.heading_level_1.heading_modifier Modifier
        .raw-text
          :markdown
            Modifier explanation

            Picture

            __Examples__

            `disabled`, `highlighted`, `checked`, `fixed`, `size big`, `color yellow`
    .grid__row
      .grid__cell-sm_size_12.raw-text
        br
        :markdown
          Abstract examples is not quite enough sometimes.

          We prepeared some popular sites, that was marked up with BEM methodology:

    .grid__row
      .grid__cell-sm_size_1
      .grid__cell-sm_size_10.raw-text
        .browser
          .browser__title Github
          .container(style="padding: 10px 20px;")
            br
            br
            br
            br
            br
            br
            br
            br
            br
            br
            br
            br
            br
            br
            br
            br
            br
            br
            br

      .grid__cell-sm_size_1

    .grid__row
      .grid__cell-sm_size_12.raw-text
        :markdown
          ### Case study

          We are prepearing little case study on "How to migrate existing project to BEM". In meanwhile you can watch nice presentation by Nicole Sullivan — "[CSS preprocessor performance](http://www.youtube.com/watch?v=0NDyopLKE1w)". It gives a very good explanation of problems, that she meets in major of sites and ways to track and handle them.

  +edit('https://github.com/getbem/getbem.com/edit/master/pages/introduction/introduction.jade')
